<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>dp_1</title>
    <url>/2025/01/15/algorithm/dp_1/</url>
    <content><![CDATA[<html><head></head><body><h1 id="希望系统的学习一下dp"><a href="#希望系统的学习一下dp" class="headerlink" title="希望系统的学习一下dp"></a>希望系统的学习一下dp</h1></body></html>]]></content>
      <categories>
        <category>algorithm</category>
      </categories>
  </entry>
  <entry>
    <title>ECharts基础</title>
    <url>/2025/01/14/feisu/feisu_first/ECharts%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h2 id="Echarts-基于javascript的开源图表库"><a href="#Echarts-基于javascript的开源图表库" class="headerlink" title="Echarts-基于javascript的开源图表库"></a>Echarts-基于javascript的开源图表库</h2><ol>
<li><strong>折线图</strong></li>
</ol>
<h5 id="我们一起看下最基础的绘制图标的组件，这里以jsx为例"><a href="#我们一起看下最基础的绘制图标的组件，这里以jsx为例" class="headerlink" title="我们一起看下最基础的绘制图标的组件，这里以jsx为例"></a>我们一起看下最基础的绘制图标的组件，这里以jsx为例</h5><figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">CustomECharts</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">  <span class="keyword">const</span> chartRef = <span class="title function_">useRef</span>(<span class="literal">null</span>); <span class="comment">// 引用 DOM 节点</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">// 初始化 ECharts 实例</span></span><br><span class="line">    <span class="keyword">const</span> myChart = echarts.<span class="title function_">init</span>(chartRef.<span class="property">current</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置选项</span></span><br><span class="line">    <span class="keyword">const</span> options = {</span><br><span class="line">      <span class="attr">title</span>: {</span><br><span class="line">        <span class="attr">text</span>: <span class="string">"直接使用 ECharts 绘制折线图"</span>,</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">tooltip</span>: {</span><br><span class="line">        <span class="attr">trigger</span>: <span class="string">"axis"</span>,</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">xAxis</span>: {</span><br><span class="line">        <span class="attr">type</span>: <span class="string">"category"</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">"周一"</span>, <span class="string">"周二"</span>, <span class="string">"周三"</span>, <span class="string">"周四"</span>, <span class="string">"周五"</span>, <span class="string">"周六"</span>, <span class="string">"周日"</span>],</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">yAxis</span>: {</span><br><span class="line">        <span class="attr">type</span>: <span class="string">"value"</span>,</span><br><span class="line">      },</span><br><span class="line">      <span class="attr">series</span>: [</span><br><span class="line">        {</span><br><span class="line">          <span class="attr">name</span>: <span class="string">"访问量"</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">"line"</span>,</span><br><span class="line">          <span class="attr">data</span>: [<span class="number">120</span>, <span class="number">200</span>, <span class="number">150</span>, <span class="number">80</span>, <span class="number">70</span>, <span class="number">110</span>, <span class="number">130</span>],</span><br><span class="line">          <span class="attr">smooth</span>: <span class="literal">true</span>,</span><br><span class="line">        },</span><br><span class="line">      ],</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置选项</span></span><br><span class="line">    myChart.<span class="title function_">setOption</span>(options);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理函数，防止内存泄漏</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> {</span><br><span class="line">      myChart.<span class="title function_">dispose</span>();</span><br><span class="line">    };</span><br><span class="line">  }, []);   <span class="comment">//这里依赖项为[]，说明只有组件首次渲染时运行</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">ref</span>=<span class="string">{chartRef}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">{{</span> <span class="attr">width:</span> "<span class="attr">100</span>%", <span class="attr">height:</span> <span class="attr">400</span> }} // <span class="attr">设置图表宽高</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_first</category>
      </categories>
  </entry>
  <entry>
    <title>React基础</title>
    <url>/2025/01/10/feisu/feisu_first/React%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="With-the-first-phase-in-Fs"><a href="#With-the-first-phase-in-Fs" class="headerlink" title="With the first phase in Fs"></a>With the first phase in Fs</h1><h2 id="React"><a href="#React" class="headerlink" title="React"></a><strong>React</strong></h2><p><a href="https://zh-hans.react.dev/learna">官方教程文档</a><br></p>
<p><a href="https://echarts.apache.org/zh/index.html">echarts</a><br></p>
<p><a href="https://ant.design/components/table-cn">Ant design</a><br></p>
<hr>
<ul>
<li>关于props</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//这是解构式的组件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">{ person, size }</span>) {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"><span class="comment">//解构等价于如下</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Avatar</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="keyword">let</span> person = props.<span class="property">person</span>;</span><br><span class="line">  <span class="keyword">let</span> size = props.<span class="property">size</span>;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//展开语法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params">props</span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span> {<span class="attr">...props</span>} /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//将jxs作为子组件传递</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Avatar</span> <span class="keyword">from</span> <span class="string">'./Avatar.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//card组件接收到一个被设为&lt;Avatar /&gt;的children prop，并包裹在div中渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Card</span>(<span class="params">{ children }</span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      {children}</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Profile</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Avatar</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">size</span>=<span class="string">{100}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">person</span>=<span class="string">{{</span> </span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">name:</span> '<span class="attr">Katsuko</span> <span class="attr">Saruhashi</span>',</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">imageId:</span> '<span class="attr">YfeOqp2</span>'</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        }}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<hr>
<ul>
<li>关于useState<br><blockquote>
<ul>
<li>注意：Hooks ——以 use 开头的函数——只能在组件或自定义 Hook 的最顶层调用。 你不能在条件语句、循环语句或其他嵌套函数内调用 Hook。Hook 是函数，但将它们视为关于组件需求的无条件声明会很有帮助。在组件顶部 “use” React 特性，类似于在文件顶部“导入”模块。<br>设置 state 只会为下一次渲染变更 state 的值（state变量会保存上次渲染的值）,在本次渲染中，并不会改变变量的初始值，所以说state如同一个快照，是记住一次渲染的状态。</li>
</ul>
</blockquote>
</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> { useState } <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> [number, setNumber] = <span class="title function_">useState</span>(<span class="number">0</span>);</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{number}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">{()</span> =&gt;</span> {</span></span><br><span class="line"><span class="language-xml">        setNumber(number + 1);</span></span><br><span class="line"><span class="language-xml">        setNumber(number + 1);</span></span><br><span class="line"><span class="language-xml">        setNumber(number + 1);</span></span><br><span class="line"><span class="language-xml">      }}&gt;+3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>
<p>这段代码点击按钮后，number的值会是‘1’而不是‘3’，就是因为在第一次渲染期间，state的值一直是0，所以你会设置三次‘1’</p>
<hr>
<ul>
<li>关于展开式语法{…FromData}<br><br>假设formData是这样的：</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> formData = {</span><br><span class="line">  <span class="attr">pfc_data</span>: <span class="string">"0,0,0,1,1,0,0,0"</span>,</span><br><span class="line">  <span class="attr">service_port</span>: <span class="string">"8080"</span>,</span><br><span class="line">  <span class="attr">mtu_data</span>: <span class="string">"4046"</span>,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>
<p>如果我们使用</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> params = { ...formdata}</span><br></pre></td></tr></tbody></table></figure>
<p>那么我们的params就成为一个新的对象，里面的属性和1formData一样，使用 …formData 可以快速地复制一个对象的属性，而不需要手动列出每个属性</p>
</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_first</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/01/08/hello-world/</url>
    <content><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
</body></html>]]></content>
  </entry>
  <entry>
    <title>Problem&amp;Slove</title>
    <url>/2025/01/15/feisu/feisu_first/Problem&amp;Slove/</url>
    <content><![CDATA[<html><head></head><body><h5 id="插入截图："><a href="#插入截图：" class="headerlink" title="插入截图："></a>插入截图：</h5><ul>
<li><p>首先 <code>npm install hexo-asset-img --save</code><br><br>&nbsp;这个可以将本地路径在hexo g的时候转换为html格式文件</p>
</li>
<li><p>下载vscode粘贴图片插件<br><br>&nbsp;在vscode的插件库中搜<code>paste image</code>，复制了图片后，直接<code>Ctrl+Alt+V</code>就可以把图片粘贴到Markdown文档里了。我发现在windows下直接复制图片粘不上去，但是截图之后就可以粘上去。</p>
</li>
<li><p>将 <code>_config.yml </code>文件中的 <code>post_asset_folder </code>选项设为 <code>true</code><br><br>&nbsp;目的就是在使用hexo new xxx指令新建md文档博文时，在相同的路径下同步创建一个xxx文件夹，而xxx文件夹就是用来存放新建md文档里的图片的</p>
</li>
<li><p><em>总结就是我们需要一个将md转化为html文件路径的npm包，要粘贴截图的话就要下载vscode插件，然后再修改一下配置，但是这一切的底层逻辑都是，我们需要一个同名文件夹保存图片，然后正确的引用它，在此之前我们一定记得需要转换npm包的下载</em></p>
</li>
</ul>
<hr>
<h5 id="python-pip下载问题"><a href="#python-pip下载问题" class="headerlink" title="python pip下载问题"></a>python pip下载问题</h5><ol>
<li>网络要是没问题可能是版本过低<br><br><code>pip install —upgrade pip</code><br><br>如果提示已经是最新版本还是下不了：<br><br>1.python版本过低，需要更换高版本的（推荐,亲测解决）<br>2.手动下载pip包（太麻烦了）</li>
<li>国内网络问题，可以使用镜像源下包<br>临时使用镜像源下包<code>pip install 包名 -i 镜像源地址</code><br><br>例如：<code>pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple</code><br></li>
<li>永久可以配置国内镜像源<br><code>pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</code><br><br>这会配置清华大学镜像源<br></li>
<li>如果是ssl问题可以考虑跳过ssl验证<br><code>pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org &lt;package_name&gt;</code><br><br><code>pip install --trusted-host pypi.org --trusted-host pypi.python.org pyplot &lt;package_name&gt;</code></li>
</ol>
<hr>
<h5 id="github本地用ssh-pull和clone都报错超时"><a href="#github本地用ssh-pull和clone都报错超时" class="headerlink" title="github本地用ssh pull和clone都报错超时"></a>github本地用ssh pull和clone都报错超时</h5><ul>
<li>解决：<br><br>在本地.ssh文件夹下面新建config，配置如下代码即可<br>检查连接：<code>ssh -T git@github.com</code></li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User szf1069059343@outlook.com</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></tbody></table></figure>
<hr>
<h5 id="hexo-d推不上去，报错Spawn-failed"><a href="#hexo-d推不上去，报错Spawn-failed" class="headerlink" title="hexo d推不上去，报错Spawn failed"></a>hexo d推不上去，报错Spawn failed</h5><img src="/2025/01/15/feisu/feisu_first/Problem&amp;Slove/2025-01-18-10-30-32.png" class="">
<ul>
<li>解决<br><br>网上大致分为三种说法<br></li>
</ul>
<ol>
<li>删除public和.deploy_git文件夹，重新hexo clean，hexo g，hexo d</li>
<li>配置_config.yml文件</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/zdqf/zdqf.github.io.git //换成ssh形式的url</span><br><span class="line">  branch: main</span><br></pre></td></tr></tbody></table></figure>
<ol start="3">
<li>先拉个仓库到本地，回滚到某次能成功提交的部分，可以很早的版本没关系，再回来hexo clean，hexo g，hexo d，亲测有效</li>
</ol>
</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_first</category>
      </categories>
  </entry>
  <entry>
    <title>linux基础</title>
    <url>/2025/01/10/feisu/feisu_first/linux%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<html><head></head><body><h1 id="With-the-first-phase-in-Fs"><a href="#With-the-first-phase-in-Fs" class="headerlink" title="With the first phase in Fs"></a>With the first phase in Fs</h1><h2 id="linux"><a href="#linux" class="headerlink" title="linux"></a><strong>linux</strong></h2><h6 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a><em>基本命令</em></h6><ul>
<li>文件目录操作</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前目录</span></span><br><span class="line"><span class="built_in">pwd</span> <span class="comment"># Print Working Directory</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出目录内容</span></span><br><span class="line"><span class="built_in">ls</span> <span class="comment"># 默认列出当前目录的内容</span></span><br><span class="line"><span class="built_in">ls</span> -l <span class="comment"># 详细信息（权限、大小、修改时间等）</span></span><br><span class="line"><span class="built_in">ls</span> -a <span class="comment"># 包括隐藏文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改目录</span></span><br><span class="line"><span class="built_in">cd</span> /path/to/directory <span class="comment"># 切换到指定目录</span></span><br><span class="line"><span class="built_in">cd</span> .. <span class="comment"># 返回上一级目录</span></span><br><span class="line"><span class="built_in">cd</span> ~ <span class="comment"># 回到用户主目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建目录</span></span><br><span class="line"><span class="built_in">mkdir</span> new_dir <span class="comment"># 创建一个目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p dir1/dir2 <span class="comment"># 递归创建多级目录</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除文件或目录</span></span><br><span class="line"><span class="built_in">rm</span> file.txt <span class="comment"># 删除文件</span></span><br><span class="line"><span class="built_in">rm</span> -r <span class="built_in">dir</span> <span class="comment"># 递归删除目录及内容</span></span><br><span class="line"><span class="built_in">rm</span> -i file.txt <span class="comment"># 删除前提示确认</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝文件或目录</span></span><br><span class="line"><span class="built_in">cp</span> file1 file2 <span class="comment"># 将 file1 拷贝为 file2</span></span><br><span class="line"><span class="built_in">cp</span> -r dir1 dir2 <span class="comment"># 递归拷贝目录 dir1 到 dir2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动或重命名</span></span><br><span class="line"><span class="built_in">mv</span> file1 file2 <span class="comment"># 将 file1 重命名为 file2 或移动到 file2</span></span><br><span class="line"><span class="built_in">mv</span> file /path/to/destination <span class="comment"># 移动到目标路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看文件内容</span></span><br><span class="line"><span class="built_in">cat</span> file.txt <span class="comment"># 显示文件内容</span></span><br><span class="line">more file.txt <span class="comment"># 分页显示文件内容</span></span><br><span class="line">less file.txt <span class="comment"># 交互式分页查看文件（支持上下滚动）</span></span><br><span class="line"><span class="built_in">head</span> -n 10 file.txt <span class="comment"># 查看前 10 行</span></span><br><span class="line"><span class="built_in">tail</span> -n 10 file.txt <span class="comment"># 查看后 10 行</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 压缩文件</span></span><br><span class="line">tar -czvf archive.tar.gz file1 file2 dir1 <span class="comment"># 打包并压缩为 gzip 格式</span></span><br><span class="line">zip -r archive.zip file1 dir1 <span class="comment"># 压缩为 zip 格式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压文件</span></span><br><span class="line">tar -xzvf archive.tar.gz <span class="comment"># 解压 gzip 格式</span></span><br><span class="line">unzip archive.zip <span class="comment"># 解压 zip 格式</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>文件搜索</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查找文件</span></span><br><span class="line">find /path -name <span class="string">"filename"</span> <span class="comment"># 根据文件名查找</span></span><br><span class="line">find /path -<span class="built_in">type</span> d -name <span class="string">"dir_name"</span> <span class="comment"># 查找目录</span></span><br><span class="line">find /path -size +10M <span class="comment"># 查找大于 10 MB 的文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索文件内容</span></span><br><span class="line">grep <span class="string">"keyword"</span> file.txt <span class="comment"># 在文件中搜索关键字</span></span><br><span class="line">grep -r <span class="string">"keyword"</span> /path <span class="comment"># 递归搜索关键字</span></span><br><span class="line">grep -i <span class="string">"keyword"</span> file.txt <span class="comment"># 忽略大小写</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>磁盘与目录空间</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看磁盘使用情况</span></span><br><span class="line"><span class="built_in">df</span> -h <span class="comment"># 以人类可读格式显示磁盘使用情况</span></span><br><span class="line"><span class="built_in">du</span> -sh <span class="built_in">dir</span> <span class="comment"># 查看目录大小</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 /path <span class="comment"># 查看目录下一级目录的大小</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>进程&amp;系统&amp;用户管理</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看当前运行的进程</span></span><br><span class="line">ps -aux <span class="comment"># 显示所有进程</span></span><br><span class="line">top <span class="comment"># 动态显示进程运行情况</span></span><br><span class="line">htop <span class="comment"># 类似 top，需单独安装，交互式界面更友好</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> PID <span class="comment"># 根据进程 ID 杀死进程</span></span><br><span class="line"><span class="built_in">kill</span> -9 PID <span class="comment"># 强制杀死进程</span></span><br><span class="line">pkill name <span class="comment"># 根据进程名杀死进程</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前登录用户</span></span><br><span class="line"><span class="built_in">whoami</span> <span class="comment"># 显示当前用户</span></span><br><span class="line"><span class="built_in">who</span> <span class="comment"># 查看当前登录用户列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看系统信息</span></span><br><span class="line"><span class="built_in">uname</span> -a <span class="comment"># 显示系统内核信息</span></span><br><span class="line">hostname <span class="comment"># 查看主机名</span></span><br><span class="line"><span class="built_in">uptime</span> <span class="comment"># 查看系统运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加用户</span></span><br><span class="line"><span class="built_in">sudo</span> useradd username <span class="comment"># 添加用户</span></span><br><span class="line"><span class="built_in">sudo</span> passwd username <span class="comment"># 设置用户密码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除用户</span></span><br><span class="line"><span class="built_in">sudo</span> userdel username <span class="comment"># 删除用户</span></span><br><span class="line"><span class="built_in">sudo</span> userdel -r username <span class="comment"># 删除用户及其主目录</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>网络</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看网络配置</span></span><br><span class="line">ifconfig <span class="comment"># 查看网络接口配置</span></span><br><span class="line">ip addr <span class="comment"># 查看网络地址</span></span><br><span class="line">ip <span class="built_in">link</span> show <span class="comment"># 查看网络接口状态</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试网络连通性</span></span><br><span class="line">ping www.google.com <span class="comment"># 测试网络连通性</span></span><br><span class="line">traceroute www.google.com <span class="comment"># 跟踪网络路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看端口占用</span></span><br><span class="line">netstat -tuln <span class="comment"># 显示所有监听的端口</span></span><br><span class="line">ss -tuln <span class="comment"># 推荐替代 netstat，显示监听端口</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载文件</span></span><br><span class="line">wget http://example.com/file.txt <span class="comment"># 下载文件</span></span><br><span class="line">curl -O http://example.com/file.txt <span class="comment"># 用 curl 下载文件</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>软件管理</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 安装软件（Debian/Ubuntu）</span></span><br><span class="line"><span class="built_in">sudo</span> apt update <span class="comment"># 更新软件包索引</span></span><br><span class="line"><span class="built_in">sudo</span> apt install package_name <span class="comment"># 安装软件</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载软件</span></span><br><span class="line"><span class="built_in">sudo</span> apt remove package_name <span class="comment"># 删除软件</span></span><br><span class="line"><span class="built_in">sudo</span> apt purge package_name <span class="comment"># 连配置文件一起删除</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装软件（Red Hat/CentOS）</span></span><br><span class="line"><span class="built_in">sudo</span> yum install package_name <span class="comment"># 安装软件</span></span><br><span class="line"><span class="built_in">sudo</span> yum remove package_name <span class="comment"># 卸载软件</span></span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>查看文件内容和日志</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 查看系统日志</span></span><br><span class="line"><span class="built_in">tail</span> -f /var/log/syslog <span class="comment"># 实时查看系统日志</span></span><br><span class="line"><span class="built_in">cat</span> /var/log/syslog | grep <span class="string">"error"</span> <span class="comment"># 搜索日志中的错误信息</span></span><br><span class="line">journalctl -xe <span class="comment"># 查看最近的系统日志</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 命令历史</span></span><br><span class="line"><span class="built_in">history</span> <span class="comment"># 显示命令历史</span></span><br><span class="line">!n <span class="comment"># 执行第 n 条历史命令</span></span><br><span class="line">Ctrl + R <span class="comment"># 搜索历史命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清屏</span></span><br><span class="line">clear <span class="comment"># 清屏</span></span><br><span class="line">Ctrl + L <span class="comment"># 清屏快捷键</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_first</category>
      </categories>
  </entry>
  <entry>
    <title>study_01</title>
    <url>/2025/01/09/front/stduy/study_01/</url>
    <content><![CDATA[<html><head></head><body><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>爱人如养花对不对<br><br>时间能够静止嘛？<br><br>node，npm，nvm，yarn，git你弄明白了嘛？<br><br>npm，nvm，node，yarn</p>
<p><em><strong>Node.js 是运行时，是前端工具的基石。</strong></em><br><br><em><strong>npm 和 yarn 都是包管理工具，可以选择一个使用。</strong></em><br><br><em><strong>nvm 是 Node.js 版本管理工具，推荐安装以方便切换版本。</strong></em><br></p>
<ul>
<li><p>Node.js 是一种运行 JavaScript 的 服务器端环境，可以在本地（而不是浏览器）运行 JavaScript 代码。<br>简单来说，它是前端工具和框架（如 Vue、React、Angular）的运行时依赖。</p>
</li>
<li><p>npm 是 Node.js 的默认 包管理器，用于安装和管理前端开发所需的各种工具和库。</p>
</li>
<li><p>nvm 是一个 Node.js 版本管理工具，可以帮助你在不同版本的 Node.js 间切换。</p>
</li>
<li><p>yarn 是由 Facebook 开发的一个替代 npm 的 包管理工具，目标是提供更快、更可靠的依赖管理。</p>
</li>
</ul>
<h3 id="最佳实践："><a href="#最佳实践：" class="headerlink" title="最佳实践："></a>最佳实践：</h3><ol>
<li><p>安装 nvm<br>原因：可以灵活管理 Node.js 版本，避免项目间的版本冲突。<br>官网：<a href="https://nvm.uihtm.com/">https://nvm.uihtm.com</a></p>
</li>
<li><p>安装 Node.js<br>使用 nvm 安装所需的 Node.js 版本，例如：</p>
</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">nvm install 18</span><br><span class="line">nvm use 18</span><br></pre></td></tr></tbody></table></figure>
<p>确保安装成功：</p>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></tbody></table></figure>

<ol start="3">
<li>选择 npm 或 yarn<br>一般推荐：<br>默认使用 npm，尤其是刚入门时。<br>如果团队或项目要求，切换到 yarn：</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">npm install -g yarn</span><br><span class="line">yarn -v</span><br></pre></td></tr></tbody></table></figure>

<ol start="4">
<li>初始化项目<br>进入项目文件夹：</li>
</ol>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">mkdir my-project</span><br><span class="line">cd my-project</span><br><span class="line">npm init -y</span><br></pre></td></tr></tbody></table></figure>

<p>初始化后，package.json 文件会自动生成。</p>
<ol start="5">
<li>安装依赖<br>使用 npm：<br><code>npm install &lt;包名&gt;</code><br>使用 yarn：<br><code>yarn add &lt;包名&gt;</code></li>
<li>全局安装常用工具（如脚手架）<br>Vue CLI：<br><code>npm install -g @vue/cli</code><br>vue –version<br>React 项目初始化工具：<br><code>npx create-react-app my-app</code></li>
<li>版本控制与锁文件<br>锁文件：<br>npm 使用 package-lock.json。<br>yarn 使用 yarn.lock。</li>
</ol>
<h5 id="包路径的最佳实践："><a href="#包路径的最佳实践：" class="headerlink" title="包路径的最佳实践："></a>包路径的最佳实践：</h5><p>我们在nvm安装目录下新建node_global, node_cache,然后在系统和用户环境变量path里添加一个…/node_global,这个路径就是全局安装依赖包的环境,键入命令<code>npm root -g</code>，回显路径D:\software\nvm\node_global\node_modules，就是成功了，如果以后下包加上了 <code>-g 或 --global</code>，就是全局安装，下的包就会进入这个文件夹</p>
</body></html>]]></content>
      <categories>
        <category>front</category>
      </categories>
  </entry>
  <entry>
    <title>study_02</title>
    <url>/2025/01/09/front/stduy/study_02/</url>
    <content><![CDATA[<html><head></head><body><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>我曾经跨过山和大海，也穿过人山人海<br><br>我曾经拥有整个世界，转眼都飘散如烟</p>
</body></html>]]></content>
      <categories>
        <category>front</category>
      </categories>
  </entry>
  <entry>
    <title>python_base</title>
    <url>/2025/01/16/feisu/feisu_first/python_base/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>基础网址：<br><br><a href="https://www.python.org/">python官网</a><br><br><a href="https://pypi.org/project/pip/">pip官网</a><br><br><a href="https://www.jetbrains.com/pycharm/">pycharm官网</a><br><br><a href="https://www.pythontab.com/">python中文社区</a><br><br>基础教程：<br><br><a href="https://docs.python.org/zh-cn/3.9/index.html">官方教程</a><br><br><a href="https://www.runoob.com/python/python-tutorial.html">菜鸟教程</a><br><br><a href="https://www.w3school.com.cn/python/index.asp">W3school</a><br><br><a href="https://www.jmjc.tech/tutorial/python/1">简明教程</a><br><br>机器学习&amp;数据分析： <br><br><a href="https://numpy.org/doc/stable/">numpy</a><br><br><a href="https://pandas.pydata.org/docs/user_guide/index.html">pandas</a><br><br><a href="https://scikit-learn.org/stable/">sklearn</a><br><br><a href="https://matplotlib.org/stable/users/getting_started/">matplotlib</a><br><br><a href="https://gallery.pyecharts.org/#/Bar/stack_bar_percent">pyecharts</a><br><br><a href="http://seaborn.pydata.org/">seaborn</a><br><br><a href="https://tensorflow.google.cn/?hl=zh-cn">Tensorflow</a><br><br><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/guides/index_cn.html">飞浆</a><br><br>优质博客：<br><br><a href="https://blog.csdn.net/2301_78095812/article/details/134829313">算法基本100</a><br><br><a href="https://blog.csdn.net/weixin_40025666/article/details/137593762">基本数据结构</a><br></p>
</blockquote>
<h3 id="python虚拟机"><a href="#python虚拟机" class="headerlink" title="python虚拟机"></a><em><strong>python虚拟机</strong></em></h3><h5 id="首先我们要搞清楚python依赖的存贮结构"><a href="#首先我们要搞清楚python依赖的存贮结构" class="headerlink" title="首先我们要搞清楚python依赖的存贮结构"></a>首先我们要搞清楚python依赖的存贮结构</h5><ol>
<li><p>当我们建立的项目没有构建虚拟环境的时候，外部依赖包是使用的默认的 External Libraries，其实其中包都放在<br>  python安装路径下，其中我们使用pip下载的包在 your python location/Lib/site-package 下, 可执行文件（.exe）<br>  都放在  your python location/Scripts/ 下， 例如我们使用命令 <code>pip install pipenv</code> 下载pipenv，就会将<br>  依赖和可执行文件分别放入上述两个路径下</p>
</li>
<li><p>当使用虚拟环境来隔离每一个项目所需要的包，目前主流的有三种方式：<br> Virtualenv Environment  –这个就是最基本的通过创建 .venv 方式，将整个依赖环境全部丢在这个文件夹下面<br> Conda Environment  –这个日后补充<br> Pipenv Environment  –这个就是传说中最厉害的包管理工具，你可以理解成py中的maven？ 总之需要先下载pipenv，然后创建环境</p>
</li>
</ol>
<ul>
<li>有一点十分值得注意，如果我们使用pipenv，默认的虚拟环境会在C：/user/.virtualenv 文件夹下，这样不利于包的拓展C盘会越来越大<br> 可以在系统环境变量中新建一个环境变量 PIPENV_VENV_IN_PROJECT 环境变量，设置值为1，这样整个虚拟环境就被创建到项目文件夹下.venv</li>
</ul>
<h3 id="python-pip"><a href="#python-pip" class="headerlink" title="python pip"></a><em><strong>python pip</strong></em></h3><ul>
<li>检查版本：</li>
</ul>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">python --version</span><br><span class="line">pip --version</span><br></pre></td></tr></tbody></table></figure>
<ul>
<li><p>pip基本指令<br></p>
<blockquote>
<p>安装包：pip install 包名，例如pip install requests。可以指定安装包的版本，如pip install requests==2.23.0。<br><br>升级包：pip install –upgrade 包名，例如pip install –upgrade requests。这将升级已安装的包到最新版本。或者升级自己pip install —upgrade pip。<br><br>列出已安装的包：pip list。这将显示已安装的所有包及其版本号。<br><br>卸载包：pip uninstall 包名，例如pip uninstall requests。这将卸载已安装的包。<br><br>查看包的详细信息：pip show 包名，例如pip show requests。这将显示已安装包的详细信息，包括版本号、依赖关系等。<br><br>下载包但不安装：pip download 包名，例如pip download requests。这将下载已安装包的最新版本到当前目录。<br>安装多个包：pip install 包名1 包名2 …，例如pip install requests numpy。这将同时安装多个包。<br><br>离线安装包：先下载包的tar.gz文件，然后使用pip install 包的路径进行安装，例如pip install /path/to/requests-2.23.0-py3-none-any.whl。这将离线安装已下载的包。一般见于手动安装包的场景<br><br>设置虚拟环境：使用virtualenv命令创建一个独立的虚拟环境，并在该环境中使用pip安装包。这样可以避免不同项目之间的依赖冲突。<br><br>使用requirements文件：将多个包的版本信息写入requirements文件（例如requirements.txt），然后使用pip install -r requirements.txt一次性安装所有依赖项。这将简化包的安装过程并确保所有依赖项的正确版本。<br><br>在使用pip时，可以根据需要选择合适的镜像源和命令来满足需求。同时，为了确保代码的可移植性和避免依赖冲突，建议在项目中使用requirements文件来管理依赖项。<br></p>
</blockquote>
</li>
<li><p>手动下包<br><br>在浏览器中访问<a href="https://pypi.org/%EF%BC%8C%E6%90%9C%E7%B4%A2%E6%82%A8%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85%EF%BC%8C%E6%89%BE%E5%88%B0%E9%80%82%E5%90%88%E6%82%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%EF%BC%8C%E4%B8%8B%E8%BD%BDwhl%E6%96%87%E4%BB%B6%EF%BC%88Windows%EF%BC%89%E6%88%96tar.gz%E6%96%87%E4%BB%B6%EF%BC%88Linux/macOS%EF%BC%89%E3%80%82%E7%84%B6%E5%90%8E%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E5%91%BD%E4%BB%A4%E6%89%8B%E5%8A%A8%E5%AE%89%E8%A3%85%EF%BC%9A">https://pypi.org/，搜索您要安装的包，找到适合您系统的版本，下载whl文件（Windows）或tar.gz文件（Linux/macOS）。然后使用以下命令手动安装：</a></p>
</li>
</ul>
<figure class="highlight plaintext"><table><tbody><tr><td class="code"><pre><span class="line">Windows:</span><br><span class="line">pip install 包名-版本号.whl</span><br><span class="line">Linux/macOS:</span><br><span class="line">pip install 包名-版本号.tar.gz</span><br></pre></td></tr></tbody></table></figure>

<ul>
<li>镜像源设置<br><blockquote>
<p>清华大学的镜像源：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br><br>阿里云：<a href="https://mirrors.aliyun.com/pypi/simple/">https://mirrors.aliyun.com/pypi/simple/</a><br><br>中国科技大学：<a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a></p>
</blockquote>
</li>
</ul>
<ol>
<li>&nbsp;<em>Windows 系统</em><br><br>在资源管理器地址栏中输入 %APPDATA%，回车后进入该目录，新建一个名为 pip 的文件夹，在 pip 文件夹中新建一个 pip.ini 文件。<br>在 pip.ini 文件中输入以下内容：</li>
</ol>
<figure class="highlight txt"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">   index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">   trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>&nbsp;<em>linux 系统</em><br><br>打开终端，在用户主目录下创建&nbsp;<code>.pip</code>&nbsp;目录（如果不存在的话），命令为&nbsp;<code>mkdir ~/.pip</code><br>在&nbsp;<code>.pip</code>&nbsp;目录下创建&nbsp;<code>pip.conf</code>&nbsp;文件，命令为&nbsp;<code>touch ~/.pip/pip.conf</code><br>使用文本编辑器打开&nbsp;<code>pip.conf</code>&nbsp;文件:</li>
</ol>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> .pip</span><br><span class="line">vim pip.conf</span><br></pre></td></tr></tbody></table></figure>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">   index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">[install]</span><br><span class="line">   trusted-host = pypi.tuna.tsinghua.edu.cn</span><br></pre></td></tr></tbody></table></figure>

</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_first</category>
      </categories>
  </entry>
  <entry>
    <title>git-study</title>
    <url>/2025/01/15/feisu/feisu_first/git-study/</url>
    <content><![CDATA[<html><head></head><body><blockquote>
<p>init初始化本地仓库 -&gt; add提交到暂存区 -&gt; commit将暂存区文件提交到本地仓库 -&gt; push提交到远程仓库</p>
</blockquote>
<hr>
<h3 id="接触git之前我们首先要搞清楚基本的三个概念：“工作区”和“暂存区”和“本地仓库”"><a href="#接触git之前我们首先要搞清楚基本的三个概念：“工作区”和“暂存区”和“本地仓库”" class="headerlink" title="接触git之前我们首先要搞清楚基本的三个概念：“工作区”和“暂存区”和“本地仓库”"></a>接触git之前我们首先要搞清楚基本的三个概念：“工作区”和“暂存区”和“本地仓库”<br></h3><ul>
<li><strong>工作区</strong> 是你当前项目的文件夹，它包含了你正在开发的所有文件。这里的文件就是你实际在编辑、修改的文件。工作区的文件是你直接操作的文件，它们的状态可以是修改过的（但未提交），或者是新添加的文件。<br></li>
<li><strong>暂存区</strong> 是一个缓存区，也叫做索引（Index）。它是一个在本地仓库和工作区之间的临时区域，用来存放你希望在下一次提交中包括的文件。当你修改了工作区中的文件并准备提交时，首先需要将这些文件添加到暂存区。Git通过暂存区来决定哪些修改会被提交到版本历史中。<br></li>
<li><strong>本地仓库</strong> 是存储版本历史的地方，提交的记录都保存在这里。你通过 git commit 命令将暂存区的文件提交到本地仓库<br></li>
</ul>
<p>回滚到上一次提交（不保留当前修改）：<code>git reset --hard HEAD~1</code> <br><br>仅回滚暂存区，不影响工作区（保留当前修改）：<code>git reset HEAD~1</code><br><br>如果想把所有文件都未 add 的状态: <code>git reset HEAD .</code><br><br>如果想把所有文件都变回未修改的状态: <code>git checkout – .</code><br><br>如果不想改变历史，可以使用</p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 撤销最近一次提交</span></span><br><span class="line">git revert HEAD</span><br><span class="line"><span class="comment"># 撤销指定提交</span></span><br><span class="line">git revert &lt;commit-hash&gt;</span><br><span class="line"><span class="comment">#一次撤销多次提交，假如提交历史：A -&gt; B -&gt; C -&gt; D -&gt; E (HEAD)</span></span><br><span class="line">git revert --no-commit C..HEAD  <span class="comment">#告诉 Git 在撤销这些提交时不立即创建新的提交，而是将撤销的更改暂存起来。</span></span><br><span class="line">git commit -m <span class="string">"Revert multiple commits"</span>  <span class="comment">#最后通过一个单独的提交来完成所有撤销操作</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>注意：已经被 add 的修改，叫做 staged changes；未 add 的叫做 unstaged changes</p>
</blockquote>
<h3 id="关于git-stash"><a href="#关于git-stash" class="headerlink" title="关于git stash"></a>关于<code>git stash</code></h3><p>git stash会保存当前工作目录中的未提交更改，以及暂存区内容，允许你在不提交更改的情况下切换分支或执行别的操作</p>
<ol>
<li>git stash 是否需要 git add？<br><br>git stash 会自动保存工作区和暂存区的修改，包括未添加到暂存区的文件和已添加到暂存区的文件。因此，即使你没有使用 git add，git stash 也会保存你对文件的更改。<br><br>不过，如果你希望将文件的修改保留在暂存区中并一起保存，你可以先使用 git add 来把文件添加到暂存区，然后再执行 git stash。<br><br>但是如果涉及新建的文件，那么在进行git stash之前需要先执行git add操作。因为新建的文件还没有进入版本控制库，需要通过git add操作将其添加进库。如果直接进行git stash而不先执行git add，新建的文件将不会被保存到stash中，仍然保留在工作区‌.<br></li>
</ol>
<ul>
<li>要先执行add纳入版本控制，stash本质是将在本地已纳入版本控制的改动暂存到缓存空间，前提要add</li>
</ul>
<ol start="2">
<li>基本用法<br><br>查看所有已保存的 stash 记录：<code>git stash list</code><br><br>恢复最近的 stash 修改(不删除栈里记录)：<code>git stash apply</code><br><br>指定恢复某个特定的 stash：<code>git stash apply stash@{0}</code><br><br>恢复修改后，如果不再需要某个 stash 条目，可以使用：<code>git stash drop stash@{0}</code><br><br>如果你想在恢复 stash 的同时删除它: <code>git stash pop</code><br><br>指定恢复某个特定的 stash(并在栈中删除)：<code>git stash apply stash@{0}</code><br><br>如果你想删除所有的 stash 记录，可以使用：<code>git stash clear</code><br></li>
</ol>
<h3 id="关于git分支的建立，关联，切换，拉取，推送"><a href="#关于git分支的建立，关联，切换，拉取，推送" class="headerlink" title="关于git分支的建立，关联，切换，拉取，推送"></a>关于git分支的建立，关联，切换，拉取，推送</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git branch &lt;branch_name&gt; <span class="comment">#创建一个新分支</span></span><br><span class="line">git branch <span class="comment">#查看所有分支：</span></span><br><span class="line">git branch -r <span class="comment">#查看远程分支：</span></span><br><span class="line">git branch -a <span class="comment">#查看本地和远程的所有分支：</span></span><br><span class="line">git branch -vv <span class="comment">#查看本地和远程分支关联情况</span></span><br><span class="line">git branch -d &lt;branch_name&gt; <span class="comment">#删除本地分支</span></span><br><span class="line">git branch -u &lt;remote-branch&gt; <span class="comment">#将当前本地分支关联到远程分支</span></span><br><span class="line"></span><br><span class="line">git checkout -b &lt;branch_name&gt; <span class="comment">#创建并切换到新分支</span></span><br><span class="line">git checkout -b feature-new origin/feature-new <span class="comment">#创建一个本地分支并关联远程</span></span><br><span class="line">git checkout -b &lt;local-branch-name&gt; &lt;remote-branch-name&gt; <span class="comment">#创建本地分支并关联远程分支。</span></span><br><span class="line">git checkout &lt;branch_name&gt; <span class="comment">#切换到已有分支：</span></span><br><span class="line"></span><br><span class="line">git status <span class="comment">#查看冲突文件</span></span><br><span class="line">git pull origin 2.2.0-dev = git fetch origin + git merge origin/2.2.0-dev  <span class="comment">#明确从远程的2.2.0-dev分支拉取最新并合并到本地当前分支</span></span><br></pre></td></tr></tbody></table></figure>

<h3 id="关于推"><a href="#关于推" class="headerlink" title="关于推"></a>关于推</h3><hr>
<hr>
<hr>
<h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><ol>
<li>自己用git，用于本地和github的交互!</li>
</ol>
<img src="/2025/01/15/feisu/feisu_first/git-study/2025-01-15-17-28-27.png" class="">
<p>由图上可以知道，要将本地仓库推到远程，一般顺序是：<br>cd到本地仓库文件目录下，bash启动<br></p>
<figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git branch -M main <span class="comment">#本地分支默认是master，我们强制改为和远程一样的main</span></span><br><span class="line">git remote add origin <span class="string">"your http or https url for github repository"</span>  <span class="comment">#关联远程分支</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">"提交内容"</span></span><br><span class="line">git push -u origin main  //绑定上游分支</span><br></pre></td></tr></tbody></table></figure>

<ol start="2">
<li>如果是公司项目,注意gitlab和github不一样<br>例子：<br>a.创建本地2.2.0-dev开发分支，并关联远程2.2.0-dev分支</li>
</ol>
<p><code>git branch -r # 查看远程分支</code></p>
<p>因为一般拉取代码默认为main分支，所以我们要通过操作创建本地2.2.0-dev分支，并关联远程分支</p>
<p><code>git checkout -b feature-new origin/feature-new</code></p>
<ul>
<li><p><code>feature-new</code> 是要创建的本地分支名称。</p>
</li>
<li><p><code>origin/feature-new</code> 是要跟踪的远程分支。</p>
</li>
</ul>
<p>b.创建本地自己的新分支</p>
<p><code>git checkout -b your-branch #创建一个和远程没有关联的自己分支</code></p>
<p><code>git branch # 查看本地分支</code></p>
<p><code>git branch -r # 查看远程分支</code><br><code>git branch -vv #查看本地分支和远程分支的关联信息</code></p>
<p>就会得到，带*的是当前的分支</p>
<ol start="3">
<li>回滚git<br><br>&nbsp;将远程仓库回滚到上一次commit<br><br>第一步 <code>git log</code> 查看提交commit哈希值<br><br>第二步 <code>git reset --hard commit_hash</code><br><br>第三步 <code>git push origin HEAD --force</code><br></li>
</ol>
<hr>
<p>&nbsp;将本地仓库回滚到上一次commit<br></p>
</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_first</category>
      </categories>
  </entry>
  <entry>
    <title>React_hooks</title>
    <url>/2025/03/25/feisu/feisu_second/React_hooks/</url>
    <content><![CDATA[<html><head></head><body><h3 id="useEffect和useState"><a href="#useEffect和useState" class="headerlink" title="useEffect和useState"></a>useEffect和useState</h3><ul>
<li><p>useState是用于记录变量状态的钩子，可以进行初始化赋值，手动是用内置的set函数改变状态</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [treeData, setTreeData] = <span class="title function_">useState</span>(); <span class="comment">//可以初始化为空，数组，值</span></span><br></pre></td></tr></tbody></table></figure>

<p>在开发实践的时候，最好在初始化的时候指明变量：</p>
<ul>
<li><p><strong>字符串</strong>（如 <code>template</code>）—— <code>useState("")</code> </p>
</li>
<li><p><strong>对象</strong>（如 <code>default_param</code>）—— <code>useState({})</code> </p>
</li>
<li><p><strong>数组</strong>（如果 <code>default_param</code> 是 <code>[]</code>）—— <code>useState([])</code> </p>
</li>
<li><p><strong>布尔值</strong>（如 <code>isLoading</code>）—— <code>useState(false)</code> </p>
</li>
<li><p><strong>数字</strong>（如 <code>count</code>）—— <code>useState(0)</code></p>
</li>
</ul>
</li>
<li><p>useEffect在不依赖任何变量的时候就只在页面第一次渲染的时候加载一次，在依赖某个变量的时候，等到那个变量发生变化就重新执行</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="comment">//执行逻辑</span></span><br><span class="line">}, [依赖变量]);</span><br></pre></td></tr></tbody></table></figure>


<p>set函数是异步执行的，也就是说如果你使用set方法去设置state，React会等到下一次渲染才会更新数据，但是React 重新渲染的 <strong>核心机制</strong> 是 <strong>状态（state）或 props 发生变化时，触发组件重新渲染</strong>。那么这个set函数写完了以后状态就应该变化了，实则不然：React会在整个事件（比如useEffect函数）走完后，触发重新渲染，打个比方说你在一个useEffect里<strong>没法</strong>同时更新状态和使用更新后的状态，需要再写一个useEffect监听这个变量，监听到变化后再处理逻辑，这样才能处理到最新的值</p>
</li>
</ul>
<hr>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">fetchScript</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetchTemplatePreview</span>(serverType);</span><br><span class="line">            <span class="keyword">const</span> {template, default_param, validation_rules} = response.<span class="property">data</span>;</span><br><span class="line">            <span class="title function_">setScriptContent</span>(template);</span><br><span class="line">            <span class="title function_">setFormData</span>(default_param);</span><br><span class="line">            <span class="title function_">setInitFormData</span>(default_param);</span><br><span class="line">            <span class="title function_">setValidationRules</span>(validation_rules);</span><br><span class="line">        } <span class="keyword">catch</span> (error) {</span><br><span class="line">            message.<span class="title function_">error</span>({</span><br><span class="line">                <span class="attr">content</span>: <span class="string">`<span class="subst">${error.message}</span>`</span>,</span><br><span class="line">                <span class="attr">duration</span>: <span class="number">2</span></span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">if</span> (serverType) {</span><br><span class="line">        <span class="title function_">fetchScript</span>();</span><br><span class="line">    }</span><br><span class="line">}, [serverType]);</span><br><span class="line"><span class="comment">// 监听scriptContent 变化后再解析模板</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (scriptContent) {</span><br><span class="line">        <span class="title function_">parseTemplate</span>(scriptContent, formData);</span><br><span class="line">    }</span><br><span class="line">}, [scriptContent]);</span><br></pre></td></tr></tbody></table></figure>

<hr>
<h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><p>这个钩子目前实践的过程中主要是有两个功能：</p>
<ol>
<li>父子通信，使父组件也能调用子组件的方法</li>
<li>隐式传递，隐式更新数据，减少不必要的渲染开销提升性能</li>
</ol>
<p>其中第一个用的最多，最常见的实践就是可复用的组件，在被某些组件复用的时候，可以直接在那个组件调用这个可复用组件自身的方法，当然前提是这个可复用的组件里写了暴露方法</p>
<p><em><strong>example1：</strong></em></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">AmpconTable</span> = (<span class="params"></span>) =&gt; {}  <span class="comment">//普通组件</span></span><br><span class="line"><span class="comment">//含有ref组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">AmpconTable</span> = <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">{props}, ref</span>) =&gt;</span> {</span><br><span class="line">    ...逻辑</span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> ({</span><br><span class="line">        <span class="title function_">refreshTable</span>(<span class="params"></span>) {</span><br><span class="line">        <span class="title function_">fetchData</span>().<span class="title function_">then</span>();</span><br><span class="line">        },</span><br><span class="line">        ...暴露方法</span><br><span class="line">    }));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure>

<p>其父组件在调用它的方法时只需呀获取实例</p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">szfTable</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> tableRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);  <span class="comment">//获取子组件实例</span></span><br><span class="line">    ...其他逻辑</span><br><span class="line">    <span class="keyword">if</span> (...) {</span><br><span class="line">        tableRef.<span class="property">current</span>.<span class="title function_">refreshTable</span>()</span><br><span class="line">        }</span><br><span class="line">    &lt;<span class="title class_">AmpconTable</span> ref={tableRef} /&gt;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>



<p><em><strong>example2：</strong></em></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SzfChild</span> = <span class="title function_">forward</span>(<span class="function">(<span class="params">{props},ref</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> portInfoRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">    ...其他逻辑</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">updatePortInfo</span> = newPortInfo =&gt; {</span><br><span class="line">        portInfoRef.<span class="property">current</span> = newPortInfo;</span><br><span class="line">    };</span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> ({</span><br><span class="line">        <span class="attr">updatePortInfo</span>: <span class="function"><span class="params">newPortInfo</span> =&gt;</span> {</span><br><span class="line">            <span class="title function_">updatePortInfo</span>(newPortInfo);</span><br><span class="line">        };</span><br><span class="line">    }));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Szf</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> [newPortInfo, setNewPortInfo] = <span class="title function_">useState</span>();</span><br><span class="line">    <span class="keyword">const</span> childRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (childRef.<span class="property">current</span>) {</span><br><span class="line">        childRef.<span class="property">current</span>.<span class="title function_">updatePortInfo</span>(newPortInfo);</span><br><span class="line">        };</span><br><span class="line">	...其他逻辑</span><br><span class="line">    &lt;<span class="title class_">Szfchild</span> ref={childRef} /&gt;</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>



<p>在实践中，我们还可以套娃使用，实现爷组件调用孙组件的方法，在实践中其实就是上层组件对底层组件的调用</p>
<p><em><strong>example3:</strong></em></p>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment">//顶层组件</span></span><br><span class="line"><span class="keyword">const</span> oneSzf = () = {</span><br><span class="line">    <span class="keyword">const</span> childRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">	<span class="keyword">const</span> szfData = childRef.<span class="property">current</span>.<span class="title function_">getChildRef</span>().<span class="property">current</span>.<span class="title function_">getData</span>();</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">twoSzf</span> <span class="attr">ref</span>=<span class="string">{childRef}/</span>&gt;</span></span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">//中间组件</span></span><br><span class="line"><span class="keyword">const</span> twoSzf = <span class="title function_">forwordRef</span>(<span class="function">(<span class="params">ref</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> childRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> ({</span><br><span class="line">        <span class="title function_">getChildRef</span>(<span class="params"></span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">chileRef</span>();</span><br><span class="line">        };</span><br><span class="line">    }));</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">threeSzf</span> <span class="attr">ref</span>=<span class="string">{childRef}</span> /&gt;</span></span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//下层组件</span></span><br><span class="line"><span class="keyword">const</span> threeSzf = <span class="title function_">forwordRef</span>(<span class="function">(<span class="params">ref</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> childRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> ({</span><br><span class="line">        ...底层方法</span><br><span class="line">        <span class="title function_">getData</span>(<span class="params"></span>) {</span><br><span class="line">           <span class="title function_">fetchData</span>().<span class="title function_">then</span>();</span><br><span class="line">        }</span><br><span class="line">    }));</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<p>很明显看的出来ref一个很重要的作用就是向下转发</p>
</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_second</category>
      </categories>
  </entry>
  <entry>
    <title>React匹配填空</title>
    <url>/2025/01/10/feisu/feisu_second/React%E5%8C%B9%E9%85%8D%E5%A1%AB%E7%A9%BA/</url>
    <content><![CDATA[<html><head></head><body><ol>
<li>案例情景：</li>
</ol>
<img src="/2025/01/10/feisu/feisu_second/React%E5%8C%B9%E9%85%8D%E5%A1%AB%E7%A9%BA/2025-01-17-17-44-35.png" class="">
<ul>
<li>初次demo效果<br></li>
</ul>
<img src="/2025/01/10/feisu/feisu_second/React%E5%8C%B9%E9%85%8D%E5%A1%AB%E7%A9%BA/2025-01-17-17-46-00.png" class="">
<br>

<p>分析需求：前端根据不同机器（Nvidia || Broadcom）去申请存放在后端的模板,用户输入可编辑的一些配置默认字段，然后选择具体机器的设备ID端口，下发配置<br><br>模板类型： Jinja2模板 <br><br>核心逻辑：拆分模板为数组进行处理 <br></p>
<p>技术难点：</p>
<ul>
<li>后端的脚本<code>{{}}</code>部分需要我们处理为可编辑的【】，并且要按照正确格式返回给前端<br></li>
</ul>
<p>解决方案：编写一个脚本渲染函数，将脚本数据按照一定规则分割成数组，比如正则匹配<code>{{}}</code>部分，然后分割成数组后利用map遍历每个值，判断是否为<code>{{}}</code>包裹的部分，如果是就渲染为【】包裹，并在其中添加input编辑框</p>
<ul>
<li><p>后端返回的脚本，脚本带不带初始化数据？还是把初始化数据提供出来</p>
</li>
<li><p>源码</p>
</li>
</ul>
<figure class="highlight javascript"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, {useState, useEffect, useImperativeHandle, forwardRef, useRef, memo} <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"><span class="keyword">import</span> {<span class="title class_">Card</span>, <span class="title class_">Select</span>, <span class="title class_">Tabs</span>, <span class="title class_">TreeSelect</span>, <span class="title class_">Button</span>, message} <span class="keyword">from</span> <span class="string">"antd"</span>;</span><br><span class="line"><span class="keyword">import</span> {<span class="title class_">PlusSquareOutlined</span>, <span class="title class_">MinusSquareOutlined</span>} <span class="keyword">from</span> <span class="string">"@ant-design/icons"</span>;</span><br><span class="line"><span class="keyword">import</span> {fetchTemplatePreview, fetchServerConfig} <span class="keyword">from</span> <span class="string">"@/modules-ampcon/apis/roce_api"</span>;</span><br><span class="line"><span class="keyword">import</span> {fetchRoceNicPort} <span class="keyword">from</span> <span class="string">"@/modules-ampcon/apis/monitor_api"</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">"./server.module.scss"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> {<span class="title class_">Tab</span>} = <span class="title class_">Tabs</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ShScriptGenerator</span> = <span class="title function_">memo</span>(</span><br><span class="line">    <span class="title function_">forwardRef</span>(<span class="function">(<span class="params">{serverType}, ref</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> [scriptContent, setScriptContent] = <span class="title function_">useState</span>(<span class="string">""</span>); <span class="comment">// 后端返回的脚本模板</span></span><br><span class="line">        <span class="keyword">const</span> [formData, setFormData] = <span class="title function_">useState</span>({}); <span class="comment">// 用户输入的数据</span></span><br><span class="line">        <span class="keyword">const</span> [validationRules, setValidationRules] = <span class="title function_">useState</span>(); <span class="comment">// 校验规则</span></span><br><span class="line">        <span class="keyword">const</span> [initFormData, setInitFormData] = <span class="title function_">useState</span>(); <span class="comment">// 初始表单数据</span></span><br><span class="line">        <span class="keyword">const</span> portInfoRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">fetchScript</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetchTemplatePreview</span>(serverType);</span><br><span class="line">                    <span class="keyword">const</span> {template, default_param, validation_rules} = response.<span class="property">data</span>;</span><br><span class="line">                    <span class="title function_">setScriptContent</span>(template);</span><br><span class="line">                    <span class="title function_">setFormData</span>(default_param);</span><br><span class="line">                    <span class="title function_">setInitFormData</span>(default_param);</span><br><span class="line">                    <span class="title function_">setValidationRules</span>(validation_rules);</span><br><span class="line">                } <span class="keyword">catch</span> (error) {</span><br><span class="line">                    message.<span class="title function_">error</span>({</span><br><span class="line">                        <span class="attr">content</span>: <span class="string">`<span class="subst">${error.message}</span>`</span>,</span><br><span class="line">                        <span class="attr">duration</span>: <span class="number">2</span></span><br><span class="line">                    });</span><br><span class="line">                }</span><br><span class="line">            };</span><br><span class="line">            <span class="keyword">if</span> (serverType) {</span><br><span class="line">                <span class="title function_">fetchScript</span>();</span><br><span class="line">            }</span><br><span class="line">        }, [serverType]);</span><br><span class="line">        <span class="comment">// 监听scriptContent 变化后再解析模板</span></span><br><span class="line">        <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="keyword">if</span> (scriptContent) {</span><br><span class="line">                <span class="title function_">parseTemplate</span>(scriptContent, formData);</span><br><span class="line">            }</span><br><span class="line">        }, [scriptContent]);</span><br><span class="line">        <span class="comment">// 解析模板，提取出需要填写的字段并填充默认值</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">parseTemplate</span> = (<span class="params">template, defaults</span>) =&gt; {</span><br><span class="line">            <span class="keyword">const</span> regex = <span class="regexp">/{{ (.*?) }}/g</span>;</span><br><span class="line">            <span class="keyword">const</span> placeholders = [];</span><br><span class="line">            <span class="keyword">let</span> match;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// eslint-disable-next-line no-cond-assign</span></span><br><span class="line">            <span class="keyword">while</span> ((match = regex.<span class="title function_">exec</span>(template)) !== <span class="literal">null</span>) {</span><br><span class="line">                placeholders.<span class="title function_">push</span>(match[<span class="number">1</span>].<span class="title function_">trim</span>());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> initialFormData = {};</span><br><span class="line">            placeholders.<span class="title function_">forEach</span>(<span class="function"><span class="params">placeholder</span> =&gt;</span> {</span><br><span class="line">                initialFormData[placeholder] = defaults[placeholder] || <span class="string">""</span>;</span><br><span class="line">            });</span><br><span class="line"></span><br><span class="line">            <span class="title function_">setFormData</span>(initialFormData);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleInputChange</span> = (<span class="params">e, field</span>) =&gt; {</span><br><span class="line">            <span class="keyword">const</span> {value} = e.<span class="property">target</span>;</span><br><span class="line">            <span class="title function_">setFormData</span>({...formData, [field]: value});</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">updatePortInfo</span> = newPortInfo =&gt; {</span><br><span class="line">            portInfoRef.<span class="property">current</span> = newPortInfo;</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleApply</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">let</span> isValid = <span class="literal">true</span>;</span><br><span class="line">                <span class="title class_">Object</span>.<span class="title function_">keys</span>(formData).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> {</span><br><span class="line">                    <span class="keyword">const</span> value = formData[key];</span><br><span class="line">                    <span class="keyword">const</span> validationRule = validationRules[key];</span><br><span class="line">                    <span class="keyword">if</span> (validationRule) {</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"min"</span> <span class="keyword">in</span> validationRule &amp;&amp; <span class="string">"max"</span> <span class="keyword">in</span> validationRule) {</span><br><span class="line">                            <span class="keyword">const</span> numValue = <span class="title class_">Number</span>(value);</span><br><span class="line">                            <span class="keyword">if</span> (numValue &lt; validationRule.<span class="property">min</span> || numValue &gt; validationRule.<span class="property">max</span>) {</span><br><span class="line">                                isValid = <span class="literal">false</span>;</span><br><span class="line">                                message.<span class="title function_">error</span>({</span><br><span class="line">                                    <span class="attr">content</span>: <span class="string">`The value of <span class="subst">${key}</span> must be between <span class="subst">${validationRule.min}</span> and <span class="subst">${validationRule.max}</span>`</span>,</span><br><span class="line">                                    <span class="attr">duration</span>: <span class="number">5</span></span><br><span class="line">                                });</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                        <span class="keyword">if</span> (<span class="string">"pattern"</span> <span class="keyword">in</span> validationRule) {</span><br><span class="line">                            <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(validationRule.<span class="property">pattern</span>);</span><br><span class="line">                            <span class="keyword">if</span> (!regex.<span class="title function_">test</span>(value)) {</span><br><span class="line">                                isValid = <span class="literal">false</span>;</span><br><span class="line">                                message.<span class="title function_">error</span>({</span><br><span class="line">                                    <span class="attr">content</span>: <span class="string">`The value of <span class="subst">${key}</span> does not match the required pattern`</span>,</span><br><span class="line">                                    <span class="attr">duration</span>: <span class="number">5</span></span><br><span class="line">                                });</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                });</span><br><span class="line">                <span class="keyword">if</span> (!isValid) {</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="keyword">const</span> params = {...formData};</span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetchServerConfig</span>(portInfoRef.<span class="property">current</span>, serverType, params);</span><br><span class="line">                <span class="keyword">if</span> (response.<span class="property">status</span> === <span class="number">200</span>) {</span><br><span class="line">                    message.<span class="title function_">success</span>(response.<span class="property">info</span> || <span class="string">"Configuration submission successful!"</span>);</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    message.<span class="title function_">error</span>(response.<span class="property">info</span> || <span class="string">"Request failed, please check the configuration"</span>);</span><br><span class="line">                }</span><br><span class="line">            } <span class="keyword">catch</span> (error) {</span><br><span class="line">                message.<span class="title function_">error</span>(<span class="string">`Request Failure: <span class="subst">${error.message}</span>`</span>);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">            message.<span class="title function_">info</span>(<span class="string">"User cancels configuration"</span>);</span><br><span class="line">            <span class="title function_">parseTemplate</span>(scriptContent, initFormData);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> ({</span><br><span class="line">            <span class="attr">handleShCancel</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">                <span class="title function_">handleCancel</span>();</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">handleShApply</span>: <span class="function">() =&gt;</span> {</span><br><span class="line">                <span class="title function_">handleApply</span>();</span><br><span class="line">            },</span><br><span class="line">            <span class="attr">updateShPortInfo</span>: <span class="function"><span class="params">newPortInfo</span> =&gt;</span> {</span><br><span class="line">                <span class="title function_">updatePortInfo</span>(newPortInfo);</span><br><span class="line">            }</span><br><span class="line">        }));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 渲染模板，处理【】部分文本为ampcon色可编辑</span></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">renderTemplate</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">            <span class="keyword">return</span> scriptContent</span><br><span class="line">                .<span class="title function_">split</span>(<span class="regexp">/({{.*?}}|#[^\n]*)/</span>)</span><br><span class="line">                .<span class="title function_">filter</span>(<span class="title class_">Boolean</span>)</span><br><span class="line">                .<span class="title function_">map</span>(<span class="function">(<span class="params">part, index</span>) =&gt;</span> {</span><br><span class="line">                    <span class="keyword">if</span> (part.<span class="title function_">startsWith</span>(<span class="string">"{{"</span>) &amp;&amp; part.<span class="title function_">endsWith</span>(<span class="string">"}}"</span>)) {</span><br><span class="line">                        <span class="keyword">const</span> key = part.<span class="title function_">slice</span>(<span class="number">2</span>, -<span class="number">2</span>).<span class="title function_">trim</span>();</span><br><span class="line">                        <span class="keyword">const</span> defaultValue = formData[key] || <span class="string">""</span>;</span><br><span class="line">                        <span class="keyword">const</span> inputWidth = <span class="string">`<span class="subst">${defaultValue.length * <span class="number">8</span>}</span>px`</span>;</span><br><span class="line">                        <span class="keyword">const</span> validationRule = validationRules[key];</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">let</span> isValid = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span> (validationRule) {</span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">"min"</span> <span class="keyword">in</span> validationRule &amp;&amp; <span class="string">"max"</span> <span class="keyword">in</span> validationRule) {</span><br><span class="line">                                <span class="keyword">const</span> numValue = <span class="title class_">Number</span>(defaultValue);</span><br><span class="line">                                isValid = numValue &gt;= validationRule.<span class="property">min</span> &amp;&amp; numValue &lt;= validationRule.<span class="property">max</span>;</span><br><span class="line">                            }</span><br><span class="line">                            <span class="keyword">if</span> (<span class="string">"pattern"</span> <span class="keyword">in</span> validationRule) {</span><br><span class="line">                                <span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(validationRule.<span class="property">pattern</span>);</span><br><span class="line">                                isValid = regex.<span class="title function_">test</span>(defaultValue);</span><br><span class="line">                            }</span><br><span class="line">                        }</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">const</span> textColor = isValid ? <span class="string">"#14c9bb"</span> : <span class="string">"red"</span>;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> (</span><br><span class="line">                            <span class="language-xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                // <span class="attr">eslint-disable-next-line</span> <span class="attr">react</span>/<span class="attr">no-array-index-key</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">key</span>=<span class="string">{index}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">style</span>=<span class="string">{{</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">display:</span> "<span class="attr">inline-flex</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">alignItems:</span> "<span class="attr">center</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">position:</span> "<span class="attr">relative</span>"</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                }}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            &gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">{styles.bracketStyles}</span>&gt;</span>【<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">type</span>=<span class="string">"text"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">className</span>=<span class="string">{styles.customInput}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">style</span>=<span class="string">{{</span>"<span class="attr">--input-width</span>"<span class="attr">:</span> <span class="attr">inputWidth</span>, <span class="attr">color:</span> <span class="attr">textColor</span>}} // <span class="attr">动态设置宽度</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">value</span>=<span class="string">{defaultValue}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">onChange</span>=<span class="string">{e</span> =&gt;</span> handleInputChange(e, key)}</span></span><br><span class="line"><span class="language-xml">                                /&gt;</span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">{styles.bracketStyles}</span>&gt;</span>】<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">                        );</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">if</span> (part.<span class="title function_">startsWith</span>(<span class="string">"#"</span>)) {</span><br><span class="line">                        <span class="keyword">return</span> (</span><br><span class="line">                            <span class="language-xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                // <span class="attr">eslint-disable-next-line</span> <span class="attr">react</span>/<span class="attr">no-array-index-key</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">key</span>=<span class="string">{index}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">style</span>=<span class="string">{{color:</span> "<span class="attr">gray</span>", <span class="attr">fontSize:</span> "<span class="attr">14px</span>", <span class="attr">fontWeight:</span> "<span class="attr">normal</span>", <span class="attr">fontFamily:</span> "<span class="attr">monospace</span>"}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            &gt;</span></span></span><br><span class="line"><span class="language-xml">                                {part} {/* 保留#并一起显示注释 */}</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">                        );</span><br><span class="line">                    }</span><br><span class="line">                    <span class="comment">// 其他内容保持原样</span></span><br><span class="line">                    <span class="comment">// eslint-disable-next-line react/no-array-index-key</span></span><br><span class="line">                    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">{index}</span>&gt;</span>{part}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line">                });</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">{{whiteSpace:</span> "<span class="attr">pre-wrap</span>", <span class="attr">fontFamily:</span> "<span class="attr">monospace</span>", <span class="attr">marginTop:</span> "<span class="attr">0px</span>"}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                        {renderTemplate()}</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    })</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ServerPage</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">    <span class="keyword">const</span> [activeTab, setActiveTab] = <span class="title function_">useState</span>(<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">const</span> [nicVendor, setNicVendor] = <span class="title function_">useState</span>();</span><br><span class="line">    <span class="keyword">const</span> [nicPort, setNicPort] = <span class="title function_">useState</span>([]);</span><br><span class="line">    <span class="keyword">const</span> [treeData, setTreeData] = <span class="title function_">useState</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> shScriptGeneratorRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleNicVendorChange</span> = value =&gt; {</span><br><span class="line">        <span class="title function_">setNicVendor</span>(value);</span><br><span class="line">        <span class="title function_">setNicPort</span>([]);</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleNicPortChange</span> = value =&gt; {</span><br><span class="line">        <span class="title function_">setNicPort</span>(value);</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">        <span class="keyword">if</span> (shScriptGeneratorRef.<span class="property">current</span>) {</span><br><span class="line">            shScriptGeneratorRef.<span class="property">current</span>.<span class="title function_">handleShCancel</span>();</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleApply</span> = (<span class="params"></span>) =&gt; {</span><br><span class="line">        <span class="keyword">if</span> (shScriptGeneratorRef.<span class="property">current</span>) {</span><br><span class="line">            shScriptGeneratorRef.<span class="property">current</span>.<span class="title function_">handleShApply</span>();</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">renderSwitcherIcon</span> = expanded =&gt; {</span><br><span class="line">        <span class="keyword">return</span> expanded ? (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">MinusSquareOutlined</span> <span class="attr">style</span>=<span class="string">{{fontSize:</span> "<span class="attr">15px</span>", <span class="attr">color:</span> "#<span class="attr">ccc</span>", <span class="attr">marginRight:</span> "<span class="attr">5px</span>"}} /&gt;</span></span></span><br><span class="line">        ) : (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">PlusSquareOutlined</span> <span class="attr">style</span>=<span class="string">{{fontSize:</span> "<span class="attr">15px</span>", <span class="attr">color:</span> "#<span class="attr">ccc</span>", <span class="attr">marginRight:</span> "<span class="attr">5px</span>"}} /&gt;</span></span></span><br><span class="line">        );</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (treeData) {</span><br><span class="line">            <span class="keyword">const</span> <span class="title function_">transformPortInfo</span> = (<span class="params">selectedValues, treeData</span>) =&gt; {</span><br><span class="line">                <span class="keyword">return</span> treeData.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, node</span>) =&gt;</span> {</span><br><span class="line">                    <span class="keyword">const</span> selectedForDevice = node.<span class="property">children</span></span><br><span class="line">                        .<span class="title function_">filter</span>(<span class="function"><span class="params">child</span> =&gt;</span> selectedValues.<span class="title function_">includes</span>(child.<span class="property">value</span>))</span><br><span class="line">                        .<span class="title function_">map</span>(<span class="function"><span class="params">child</span> =&gt;</span> child.<span class="property">value</span>.<span class="title function_">split</span>(<span class="string">"-"</span>)[<span class="number">1</span>]); <span class="comment">// 只获取端口的值（移除设备ID前缀）</span></span><br><span class="line">                    <span class="keyword">if</span> (selectedForDevice.<span class="property">length</span> &gt; <span class="number">0</span>) {</span><br><span class="line">                        acc[node.<span class="property">value</span>.<span class="title function_">toString</span>()] = selectedForDevice;</span><br><span class="line">                    }</span><br><span class="line">                    <span class="keyword">return</span> acc;</span><br><span class="line">                }, {});</span><br><span class="line">            };</span><br><span class="line">            <span class="keyword">const</span> newPortInfo = <span class="title function_">transformPortInfo</span>(nicPort, treeData);</span><br><span class="line">            <span class="keyword">if</span> (shScriptGeneratorRef.<span class="property">current</span>) {</span><br><span class="line">                shScriptGeneratorRef.<span class="property">current</span>.<span class="title function_">updateShPortInfo</span>(newPortInfo);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }, [nicPort]);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">fectchPort</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">const</span> response = <span class="keyword">await</span> <span class="title function_">fetchRoceNicPort</span>(nicVendor);</span><br><span class="line">                <span class="keyword">const</span> bankendData = response.<span class="property">data</span>;</span><br><span class="line">                <span class="keyword">const</span> <span class="title function_">transformTreeData</span> = data =&gt; {</span><br><span class="line">                    <span class="keyword">return</span> data.<span class="title function_">map</span>(<span class="function"><span class="params">node</span> =&gt;</span> ({</span><br><span class="line">                        <span class="attr">title</span>: node.<span class="property">nodename</span>,</span><br><span class="line">                        <span class="attr">value</span>: node.<span class="property">device_id</span>,</span><br><span class="line">                        <span class="attr">children</span>:</span><br><span class="line">                            node.<span class="property">children</span>?.<span class="title function_">map</span>(<span class="function"><span class="params">port</span> =&gt;</span> ({</span><br><span class="line">                                <span class="attr">title</span>: port.<span class="property">port_title</span>,</span><br><span class="line">                                <span class="attr">value</span>: <span class="string">`<span class="subst">${node.device_id}</span>-<span class="subst">${port.port_value}</span>`</span> <span class="comment">// 子节点组合 device_id 和 port_value，确保唯一</span></span><br><span class="line">                            })) || []</span><br><span class="line">                    }));</span><br><span class="line">                };</span><br><span class="line">                <span class="keyword">const</span> frontData = <span class="title function_">transformTreeData</span>(bankendData);</span><br><span class="line">                <span class="title function_">setTreeData</span>(frontData);</span><br><span class="line">            } <span class="keyword">catch</span> (error) {</span><br><span class="line">                message.<span class="title function_">error</span>({</span><br><span class="line">                    <span class="attr">content</span>: <span class="string">`<span class="subst">${error.message}</span>`</span>,</span><br><span class="line">                    <span class="attr">duration</span>: <span class="number">2</span></span><br><span class="line">                });</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        <span class="keyword">if</span> (nicVendor) {</span><br><span class="line">            <span class="title function_">fectchPort</span>();</span><br><span class="line">        }</span><br><span class="line">    }, [nicVendor]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">{{display:</span> "<span class="attr">flex</span>", <span class="attr">flexDirection:</span> "<span class="attr">column</span>", <span class="attr">height:</span> "<span class="attr">100</span>%", <span class="attr">border:</span> "<span class="attr">none</span>"}}&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Tabs</span> <span class="attr">activeKey</span>=<span class="string">{activeTab}</span> <span class="attr">onChange</span>=<span class="string">{setActiveTab}</span> <span class="attr">style</span>=<span class="string">{{flex:</span> <span class="attr">1</span>}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Tab</span> <span class="attr">tab</span>=<span class="string">"Script Deployment"</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    {/* 主内容卡片 */}</span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">Card</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">style</span>=<span class="string">{{</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">height:</span> "<span class="attr">100</span>%",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">display:</span> "<span class="attr">flex</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">flexDirection:</span> "<span class="attr">column</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">borderRadius:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">border:</span> "<span class="attr">none</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">gap:</span> "<span class="attr">large</span>"</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        }}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        <span class="attr">bodyStyle</span>=<span class="string">{{display:</span> "<span class="attr">flex</span>", <span class="attr">flex:</span> <span class="attr">1</span>, <span class="attr">flexDirection:</span> "<span class="attr">column</span>", <span class="attr">height:</span> "<span class="attr">100</span>%"}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    &gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">style</span>=<span class="string">{{</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">display:</span> "<span class="attr">flex</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">flexDirection:</span> "<span class="attr">row</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">gap:</span> <span class="attr">20</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">width:</span> "<span class="attr">100</span>%",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">height:</span> "<span class="attr">100</span>%"</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            }}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        &gt;</span></span></span><br><span class="line"><span class="language-xml">                            {/* 左侧配置卡片 */}</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Card</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">title</span>=<span class="string">"Deployment"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">style</span>=<span class="string">{{width:</span> "<span class="attr">25</span>%", <span class="attr">borderRadius:</span> <span class="attr">0</span>}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">headStyle</span>=<span class="string">{{padding:</span> "<span class="attr">20px</span> <span class="attr">20px</span>"}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">bodyStyle</span>=<span class="string">{{</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">display:</span> "<span class="attr">flex</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">flexDirection:</span> "<span class="attr">column</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">height:</span> "<span class="attr">100</span>%",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                    <span class="attr">marginTop:</span> "<span class="attr">5</span>%"</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                }}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            &gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">{{flex:</span> <span class="attr">1</span>}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    {/* NIC Vendors 输入框 */}</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">{{display:</span> "<span class="attr">flex</span>", <span class="attr">alignItems:</span> "<span class="attr">center</span>", <span class="attr">marginBottom:</span> "<span class="attr">20px</span>", <span class="attr">gap:</span> <span class="attr">20</span>}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">{{flex:</span> "<span class="attr">1</span> <span class="attr">1</span> <span class="attr">10px</span>", <span class="attr">textAlign:</span> "<span class="attr">center</span>", <span class="attr">whiteSpace:</span> "<span class="attr">nowrap</span>"}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            NIC Vendors <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">{{color:</span> "<span class="attr">red</span>"}}&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">Select</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">value</span>=<span class="string">{nicVendor}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">onChange</span>=<span class="string">{handleNicVendorChange}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">style</span>=<span class="string">{{width:</span> "<span class="attr">100</span>%"}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                        &gt;</span></span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;<span class="name">Select.Option</span> <span class="attr">value</span>=<span class="string">"nvidia"</span>&gt;</span>Nvidia<span class="tag">&lt;/<span class="name">Select.Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            <span class="tag">&lt;<span class="name">Select.Option</span> <span class="attr">value</span>=<span class="string">"broadcom"</span>&gt;</span>Broadcom<span class="tag">&lt;/<span class="name">Select.Option</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                                    {/* NIC Ports 输入框 */}</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">{{display:</span> "<span class="attr">flex</span>", <span class="attr">alignItems:</span> "<span class="attr">center</span>", <span class="attr">gap:</span> <span class="attr">38</span>}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">{{flex:</span> "<span class="attr">1</span> <span class="attr">1</span> <span class="attr">10px</span>", <span class="attr">textAlign:</span> "<span class="attr">center</span>", <span class="attr">whiteSpace:</span> "<span class="attr">nowrap</span>"}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                                            NIC Ports <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">{{color:</span> "<span class="attr">red</span>"}}&gt;</span>*<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                        <span class="tag">&lt;<span class="name">TreeSelect</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">treeData</span>=<span class="string">{treeData}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">value</span>=<span class="string">{nicPort}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">onChange</span>=<span class="string">{handleNicPortChange}</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">dropdownStyle</span>=<span class="string">{{minWidth:</span> "<span class="attr">180px</span>"}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">style</span>=<span class="string">{{width:</span> "<span class="attr">100</span>%"}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">treeCheckable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">searchPlaceholder</span>=<span class="string">"Please select"</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">allowClear</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                            <span class="attr">switcherIcon</span>=<span class="string">{({expanded})</span> =&gt;</span> renderSwitcherIcon(expanded)}</span></span><br><span class="line"><span class="language-xml">                                        /&gt;</span></span><br><span class="line"><span class="language-xml">                                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                            {/* 右侧脚本生成器卡片 */}</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Card</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">style</span>=<span class="string">{{width:</span> "<span class="attr">75</span>%", <span class="attr">height:</span> "<span class="attr">100</span>%", <span class="attr">borderRadius:</span> <span class="attr">0</span>, <span class="attr">margin:</span> <span class="attr">0</span>}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">bodyStyle</span>=<span class="string">{{height:</span> "<span class="attr">100</span>%", <span class="attr">padding:</span> "<span class="attr">30px</span>", <span class="attr">lineHeight:</span> "<span class="attr">1.3</span>"}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            &gt;</span></span></span><br><span class="line"><span class="language-xml">                                <span class="tag">&lt;<span class="name">ShScriptGenerator</span> <span class="attr">ref</span>=<span class="string">{shScriptGeneratorRef}</span> <span class="attr">serverType</span>=<span class="string">{nicVendor}</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        {/* 底部按钮卡片 */}</span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;<span class="name">Card</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">style</span>=<span class="string">{{width:</span> "<span class="attr">100</span>%", <span class="attr">borderRadius:</span> <span class="attr">0</span>}}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            <span class="attr">bodyStyle</span>=<span class="string">{{</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">display:</span> "<span class="attr">flex</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">flexDirection:</span> "<span class="attr">row</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">justifyContent:</span> "<span class="attr">flex-end</span>",</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">paddingRight:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                                <span class="attr">gap:</span> <span class="attr">20</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                            }}</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                        &gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"default"</span> <span class="attr">onClick</span>=<span class="string">{handleCancel}</span> <span class="attr">style</span>=<span class="string">{{width:</span> "<span class="attr">80px</span>"}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                                Cancel</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;<span class="name">Button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">onClick</span>=<span class="string">{handleApply}</span> <span class="attr">style</span>=<span class="string">{{width:</span> "<span class="attr">80px</span>"}}&gt;</span></span></span><br><span class="line"><span class="language-xml">                                Apply</span></span><br><span class="line"><span class="language-xml">                            <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                        <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">Tab</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Tabs</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ServerPage</span>;</span><br></pre></td></tr></tbody></table></figure>
</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_second</category>
      </categories>
  </entry>
  <entry>
    <title>python_s1</title>
    <url>/2025/01/16/feisu/feisu_first/python_s1/</url>
    <content><![CDATA[<html><head></head><body><h3 id="四大基础数据结构"><a href="#四大基础数据结构" class="headerlink" title="四大基础数据结构"></a>四大基础数据结构</h3><ol>
<li>列表(List)<br><br>列表是最常用的数据结构之一，它是一个有序的元素集合，可以存储任意类型的元素，并且允许重复。<br><br>可变性：列表是可变的，意味着可以在列表创建后添加、删除或修改其中的元素。<br><br>索引：列表中的每个元素都有一个对应的索引，从0开始计数。<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># 学生名单和成绩列表</span></span><br><span class="line">students = [<span class="string">"Alice"</span>, <span class="string">"Bob"</span>, <span class="string">"Charlie"</span>]</span><br><span class="line">scores = [<span class="number">90</span>, <span class="number">85</span>, <span class="number">88</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新学生（David，成绩92）</span></span><br><span class="line">students.append(<span class="string">"David"</span>)  <span class="comment"># 添加新学生</span></span><br><span class="line">scores.append(<span class="number">92</span>)  <span class="comment"># 添加新学生的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改某个学生的成绩（修改Bob的成绩为87）</span></span><br><span class="line">scores[<span class="number">1</span>] = <span class="number">87</span>  <span class="comment"># 通过索引修改Bob的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除学生（删除Alice及其成绩）</span></span><br><span class="line"><span class="keyword">del</span> students[<span class="number">0</span>]  <span class="comment"># 删除列表中的第一个学生（Alice）</span></span><br><span class="line"><span class="keyword">del</span> scores[<span class="number">0</span>]  <span class="comment"># 删除Alice的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印当前学生名单和成绩</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"当前学生名单："</span>, students)  <span class="comment"># 输出学生名单</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"当前学生成绩："</span>, scores)  <span class="comment"># 输出学生成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入新学生到指定位置（将"Eva"插入到Bob和Charlie之间，成绩为91）</span></span><br><span class="line">students.insert(<span class="number">1</span>, <span class="string">"Eva"</span>)  <span class="comment"># 在索引1的位置插入新学生Eva</span></span><br><span class="line">scores.insert(<span class="number">1</span>, <span class="number">91</span>)  <span class="comment"># 在同一位置插入Eva的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印插入后的学生名单和成绩</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"插入后的学生名单："</span>, students)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"插入后的学生成绩："</span>, scores)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找某个学生的成绩（查找Charlie的成绩）</span></span><br><span class="line">index = students.index(<span class="string">"Charlie"</span>)  <span class="comment"># 查找Charlie的索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Charlie的成绩："</span>, scores[index])  <span class="comment"># 使用索引查找Charlie的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均成绩</span></span><br><span class="line">average_score = <span class="built_in">sum</span>(scores) / <span class="built_in">len</span>(scores)  <span class="comment"># 计算成绩的平均值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"平均成绩："</span>, average_score)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除某个学生（移除Eva及其成绩）</span></span><br><span class="line">students.remove(<span class="string">"Eva"</span>)  <span class="comment"># 移除学生Eva</span></span><br><span class="line">scores.remove(<span class="number">91</span>)  <span class="comment"># 移除Eva的成绩</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印最终的学生名单和成绩</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最终学生名单："</span>, students)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"最终学生成绩："</span>, scores)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<hr>
<ol start="2">
<li>元组(Tuple)<br><br>元组与列表相似，但它是不可变的，一旦创建就无法更改。<br><br>不可变性：元组创建后不能被修改，这使得它在需要确保数据不变的情况下非常有用。<br><br>性能：由于不可变性，元组在某些情况下比列表更节省内存，运行速度也更快。<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">points = [(<span class="number">1</span>, <span class="number">2</span>), (<span class="number">3</span>, <span class="number">4</span>), (<span class="number">5</span>, <span class="number">6</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问元组中的元素</span></span><br><span class="line"><span class="built_in">print</span>(points[<span class="number">0</span>])       <span class="comment"># 输出 (1, 2)</span></span><br><span class="line"><span class="built_in">print</span>(points[<span class="number">0</span>][<span class="number">1</span>])    <span class="comment"># 输出 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历元组集合</span></span><br><span class="line"><span class="keyword">for</span> x, y <span class="keyword">in</span> points:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"Point: (<span class="subst">{x}</span>, <span class="subst">{y}</span>)"</span>)</span><br></pre></td></tr></tbody></table></figure>
<hr>
<ol start="3">
<li>字典(Dictionary)<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">library = {</span><br><span class="line">    <span class="string">"西游记"</span>: <span class="string">"吴承恩"</span>,</span><br><span class="line">    <span class="string">"To Kill a Mockingbird"</span>: <span class="string">"Harper Lee"</span>,</span><br><span class="line">    <span class="string">"人间草木"</span> : <span class="string">"汪曾祺"</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加新书</span></span><br><span class="line">library[<span class="string">"1984"</span>] = <span class="string">"George Orwell"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查找作者</span></span><br><span class="line">author = library[<span class="string">"人间草木"</span>]</span><br><span class="line"><span class="built_in">print</span>(author)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除书籍</span></span><br><span class="line"><span class="keyword">del</span> library[<span class="string">"To Kill a Mockingbird"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历字典</span></span><br><span class="line"><span class="keyword">for</span> title, author <span class="keyword">in</span> library.items():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"<span class="subst">{title}</span> by <span class="subst">{author}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure>
<hr>
<ol start="4">
<li>集合(Set)<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line">tasks = {<span class="string">"Buy milk"</span>, <span class="string">"Walk the dog"</span>, <span class="string">"Pay bills"</span>, <span class="string">"Buy milk"</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment"># 集合自动去重</span></span><br><span class="line"><span class="built_in">print</span>(tasks)  <span class="comment"># 输出 {'Buy milk', 'Walk the dog', 'Pay bills'}</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加任务</span></span><br><span class="line">tasks.add(<span class="string">"Read book"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移除任务</span></span><br><span class="line">tasks.remove(<span class="string">"Walk the dog"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查任务是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"Pay bills"</span> <span class="keyword">in</span> tasks:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Remember to pay your bills!"</span>)</span><br></pre></td></tr></tbody></table></figure>

<hr>
<hr>
<hr>
<h3 id="实现10种数据结构"><a href="#实现10种数据结构" class="headerlink" title="实现10种数据结构"></a>实现10种数据结构</h3><ol>
<li>数组 (Array)<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.array = []  <span class="comment"># 初始化一个空数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.array.append(value)  <span class="comment"># 添加元素到数组的末尾</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self, index</span>):</span><br><span class="line">        <span class="comment"># 获取指定索引的元素</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.array):</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.array[index]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果索引越界，返回None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">length</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.array)  <span class="comment"># 返回数组的长度</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">remove</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 删除数组中第一次出现的元素</span></span><br><span class="line">        <span class="keyword">if</span> value <span class="keyword">in</span> <span class="variable language_">self</span>.array:</span><br><span class="line">            <span class="variable language_">self</span>.array.remove(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">update</span>(<span class="params">self, index, value</span>):</span><br><span class="line">        <span class="comment"># 更新指定索引的元素</span></span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= index &lt; <span class="built_in">len</span>(<span class="variable language_">self</span>.array):</span><br><span class="line">            <span class="variable language_">self</span>.array[index] = value</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">contains</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="comment"># 判断数组是否包含某个元素</span></span><br><span class="line">        <span class="keyword">return</span> value <span class="keyword">in</span> <span class="variable language_">self</span>.array</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.array.clear()  <span class="comment"># 清空数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.array.copy()  <span class="comment"># 返回数组的副本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__iter__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 使得数组支持遍历</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">iter</span>(<span class="variable language_">self</span>.array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">arr = Array()  <span class="comment"># 创建一个数组对象</span></span><br><span class="line">arr.append(<span class="number">1</span>)  <span class="comment"># 向数组添加元素1</span></span><br><span class="line">arr.append(<span class="number">2</span>)  <span class="comment"># 向数组添加元素2</span></span><br><span class="line">arr.append(<span class="number">3</span>)  <span class="comment"># 向数组添加元素3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"数组的第一个元素:"</span>, arr.get(<span class="number">0</span>))  <span class="comment"># 输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"数组的长度:"</span>, arr.length())  <span class="comment"># 输出: 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新数组中的元素</span></span><br><span class="line">arr.update(<span class="number">1</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"更新后的数组:"</span>, arr.array)  <span class="comment"># 输出: [1, 5, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除数组中的元素</span></span><br><span class="line">arr.remove(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"删除后的数组:"</span>, arr.array)  <span class="comment"># 输出: [1, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断数组中是否包含某个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"数组中是否包含3:"</span>, arr.contains(<span class="number">3</span>))  <span class="comment"># 输出: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"数组中是否包含5:"</span>, arr.contains(<span class="number">5</span>))  <span class="comment"># 输出: False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空数组</span></span><br><span class="line">arr.clear()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"清空后的数组:"</span>, arr.array)  <span class="comment"># 输出: []</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复制数组</span></span><br><span class="line">arr.append(<span class="number">7</span>)</span><br><span class="line">arr_copy = arr.copy()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"原数组:"</span>, arr.array)  <span class="comment"># 输出: [7]</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"数组副本:"</span>, arr_copy)  <span class="comment"># 输出: [7]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历数组</span></span><br><span class="line">arr.append(<span class="number">8</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> arr:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"遍历元素:"</span>, item)  <span class="comment"># 输出: 遍历元素: 7 和 遍历元素: 8</span></span><br></pre></td></tr></tbody></table></figure>
<hr>
<ol start="2">
<li>链表 (Linked List)<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.value = value  <span class="comment"># 节点的值</span></span><br><span class="line">        <span class="variable language_">self</span>.<span class="built_in">next</span> = <span class="literal">None</span>  <span class="comment"># 指向下一个节点的引用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkedList</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.head = <span class="literal">None</span>  <span class="comment"># 初始化时链表为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">append</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">"""在链表末尾添加元素"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="variable language_">self</span>.head = ListNode(value)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        curr = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> curr.<span class="built_in">next</span>:</span><br><span class="line">            curr = curr.<span class="built_in">next</span></span><br><span class="line">        curr.<span class="built_in">next</span> = ListNode(value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">prepend</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">"""在链表头部添加元素"""</span></span><br><span class="line">        new_node = ListNode(value)</span><br><span class="line">        new_node.<span class="built_in">next</span> = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="variable language_">self</span>.head = new_node</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">"""删除链表中指定值的第一个节点"""</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.head:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="comment"># 如果头节点就是目标节点</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.head.value == value:</span><br><span class="line">            <span class="variable language_">self</span>.head = <span class="variable language_">self</span>.head.<span class="built_in">next</span></span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        curr = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> curr.<span class="built_in">next</span>:</span><br><span class="line">            <span class="keyword">if</span> curr.<span class="built_in">next</span>.value == value:</span><br><span class="line">                curr.<span class="built_in">next</span> = curr.<span class="built_in">next</span>.<span class="built_in">next</span></span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            curr = curr.<span class="built_in">next</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="string">"""查找链表中是否存在某个值"""</span></span><br><span class="line">        curr = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            <span class="keyword">if</span> curr.value == value:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            curr = curr.<span class="built_in">next</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">print_list</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">"""打印链表中的所有元素"""</span></span><br><span class="line">        curr = <span class="variable language_">self</span>.head</span><br><span class="line">        <span class="keyword">while</span> curr:</span><br><span class="line">            <span class="built_in">print</span>(curr.value, end=<span class="string">" -&gt; "</span>)</span><br><span class="line">            curr = curr.<span class="built_in">next</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"None"</span>)  <span class="comment"># 表示链表结束</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">ll = LinkedList()</span><br><span class="line">ll.append(<span class="number">1</span>)  <span class="comment"># 在链表末尾添加元素 1</span></span><br><span class="line">ll.append(<span class="number">2</span>)  <span class="comment"># 在链表末尾添加元素 2</span></span><br><span class="line">ll.append(<span class="number">3</span>)  <span class="comment"># 在链表末尾添加元素 3</span></span><br><span class="line">ll.prepend(<span class="number">0</span>)  <span class="comment"># 在链表头部添加元素 0</span></span><br><span class="line">ll.print_list()  <span class="comment"># 输出链表: 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; None</span></span><br><span class="line"></span><br><span class="line">ll.delete(<span class="number">2</span>)  <span class="comment"># 删除值为 2 的节点</span></span><br><span class="line">ll.print_list()  <span class="comment"># 输出链表: 0 -&gt; 1 -&gt; 3 -&gt; None</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"查找值 3 是否存在:"</span>, ll.search(<span class="number">3</span>))  <span class="comment"># 输出: 查找值 3 是否存在: True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"查找值 2 是否存在:"</span>, ll.search(<span class="number">2</span>))  <span class="comment"># 输出: 查找值 2 是否存在: False</span></span><br></pre></td></tr></tbody></table></figure>
<hr>
<ol start="3">
<li>栈 (Stack)<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack = []  <span class="comment"># 初始化一个空栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">push</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.append(value)  <span class="comment"># 将元素压入栈中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">pop</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.stack:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.stack.pop()  <span class="comment"># 弹出栈顶元素</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果栈为空，返回None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.stack:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.stack[-<span class="number">1</span>]  <span class="comment"># 查看栈顶元素，不移除它</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果栈为空，返回None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack) == <span class="number">0</span>  <span class="comment"># 判断栈是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.stack)  <span class="comment"># 获取栈的大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.clear()  <span class="comment"># 清空栈</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.stack.copy()  <span class="comment"># 返回栈的副本</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">reverse</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.stack.reverse()  <span class="comment"># 反转栈中的元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">stack = Stack()  <span class="comment"># 创建一个栈对象</span></span><br><span class="line">stack.push(<span class="number">1</span>)  <span class="comment"># 压入1</span></span><br><span class="line">stack.push(<span class="number">2</span>)  <span class="comment"># 压入2</span></span><br><span class="line">stack.push(<span class="number">3</span>)  <span class="comment"># 压入3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"反转前的栈:"</span>, stack.stack)  <span class="comment"># 输出栈的内容</span></span><br><span class="line">stack.reverse()  <span class="comment"># 反转栈</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"反转后的栈:"</span>, stack.stack)  <span class="comment"># 输出反转后的栈</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<hr>
<ol start="4">
<li>队列 (Queue)<br></li>
</ol>
<figure class="highlight python"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue = deque()  <span class="comment"># 使用deque来实现队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enqueue</span>(<span class="params">self, value</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue.append(value)  <span class="comment"># 入队，添加元素到队列末尾</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">dequeue</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.queue:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue.popleft()  <span class="comment"># 出队，移除并返回队列的第一个元素</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果队列为空，返回None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">peek</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.queue:</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">self</span>.queue[<span class="number">0</span>]  <span class="comment"># 返回队列的第一个元素（不移除它）</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span>  <span class="comment"># 如果队列为空，返回None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">is_empty</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.queue) == <span class="number">0</span>  <span class="comment"># 检查队列是否为空</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(<span class="variable language_">self</span>.queue)  <span class="comment"># 返回队列中元素的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.queue.clear()  <span class="comment"># 清空队列</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">copy</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">self</span>.queue.copy()  <span class="comment"># 返回队列的副本</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例用法</span></span><br><span class="line">queue = Queue()  <span class="comment"># 创建一个队列对象</span></span><br><span class="line">queue.enqueue(<span class="number">1</span>)  <span class="comment"># 入队 1</span></span><br><span class="line">queue.enqueue(<span class="number">2</span>)  <span class="comment"># 入队 2</span></span><br><span class="line">queue.enqueue(<span class="number">3</span>)  <span class="comment"># 入队 3</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"队列首元素:"</span>, queue.peek())  <span class="comment"># 查看队列首元素，输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"队列大小:"</span>, queue.size())  <span class="comment"># 输出队列的大小，输出: 3</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"出队元素:"</span>, queue.dequeue())  <span class="comment"># 出队 1，输出: 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"队列是否为空:"</span>, queue.is_empty())  <span class="comment"># 检查队列是否为空，输出: False</span></span><br><span class="line">queue.clear()  <span class="comment"># 清空队列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"队列是否为空:"</span>, queue.is_empty())  <span class="comment"># 再次检查队列是否为空，输出: True</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>
<hr>
<ol start="5">
<li>树 (Tree)<br></li>
<li>图 (Graph)<br></li>
<li>堆 (Heap)<br></li>
<li>哈希表 (Hash Table)<br></li>
<li>并查集 (Disjoint Set Union)<br></li>
<li>字典 (Dictionary)<br></li>
</ol>
</body></html>]]></content>
      <categories>
        <category>feisu</category>
        <category>feisu_first</category>
      </categories>
  </entry>
</search>
